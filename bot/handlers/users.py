import os
from datetime import datetime
from pprint import pprint

from aiogram.filters.callback_data import CallbackData
from settings import ADMINS
from keyboards.kb import get_kb
import aiohttp
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from filters.is_admin import IsAdmin
from db_handlers.utils import add_user, delete_user
from settings import API_URL


async def get_balance():
    url = API_URL + 'api/balance/'
    headers = {'Authorization': f'Bearer {os.environ.get("access_token")}'}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            data = await response.json()
            return float(data['balance'])


async def get_services():
    url = API_URL + 'api/services/'
    headers = {'Authorization': f'Bearer {os.environ.get("access_token")}'}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            data = await response.json()
            return data['services']

async def get_check(imei, service_id):
    url = API_URL + 'api/check-imei/'
    headers = {
        'Authorization': f'Bearer {os.environ.get("access_token")}'
    }
    data = {
        'imei': imei,
        'service_id': int(service_id)
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as response:
            data = await response.json()
            if 'check' in data:
                return data['check'], True
            return data['errors'], False



def validate_imei(imei: str) -> bool:
    if len(imei) != 15 or not imei.isdigit():
        return False

    total = 0
    for i, digit in enumerate(imei[:14]):
        num = int(digit)
        if i % 2 == 1:
            num *= 2
            if num > 9:
                num -= 9
        total += num

    calculated_checksum = (10 - (total % 10)) % 10
    return calculated_checksum == int(imei[-1])


class ServiceCallback(CallbackData, prefix="service_cb"):
    imei: str
    price: float
    service_id: int


users_router = Router()

@users_router.message(IsAdmin(ADMINS), Command(commands=["adduser"]))
async def univers_cmd_handler(message: Message, command: CommandObject):
    command_args: str = command.args
    if await add_user(command_args):
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫')
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω')


@users_router.message(IsAdmin(ADMINS), Command(commands=["deleteuser"]))
async def univers_cmd_handler(message: Message, command: CommandObject):
    command_args: str = command.args
    if await delete_user(command_args):
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω')
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–¥–∞–ª–µ–Ω / –Ω–µ –Ω–∞–π–¥–µ–Ω')



@users_router.message(CommandStart())
async def cmd_start(message: Message):
    print(await get_services())
    await message.answer('–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')


@users_router.message(F.text)
async def cmd(message: Message, state: FSMContext):
    if not validate_imei(message.text):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π IMEI')
        return
    balance = await get_balance()
    services = list(filter(lambda x: float(x['price']) <= balance, await get_services()))
    await state.update_data(data={
        'services': services,
        'balance': balance,
        'imei': message.text,
    })
    kb = await get_kb(
        services,
        lambda x: ServiceCallback(service_id=x["id"], imei=message.text, price=float(x['price'])).pack(),
        lambda x: f'{x["title"]} | {x["price"]}'
    )
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}', reply_markup=kb)


@users_router.callback_query(ServiceCallback.filter())
async def cb(query: CallbackQuery, callback_data: ServiceCallback, state: FSMContext):
    msg = await query.message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
    mrkp = query.message.reply_markup
    await query.message.edit_reply_markup(reply_markup=None)
    state_data = await state.get_data()
    service_id = callback_data.service_id
    imei = state_data.get('imei')
    balance = state_data.get('balance')
    service = [i for i in state_data.get('services') if i['id'] == service_id][0]
    if float(service['price']) > balance:
        await query.answer('–ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')
        return
    data, is_check = await get_check(imei, service_id)
    #print(data)
    if not is_check:
        await query.message.answer('–û—à–∏–±–∫–∞: ' + (str(data)))
        return
    pprint(data)
    await msg.delete()
    if data['status'] != 'successful':
        await query.message.answer('–°–µ—Ä–≤–∏—Å –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IMEI')
        await query.message.edit_reply_markup(reply_markup=mrkp)
        return

    def format_timestamp(timestamp):
        return datetime.utcfromtimestamp(timestamp).strftime("%d.%m.%Y %H:%M:%S")
    properties = data['properties']
    try:
        formatted_output = f"""
üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ**
- –°—Ç–∞—Ç—É—Å: {data.get("status", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –£—Å–ª—É–≥–∞: {data.get("service", {}).get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")} (ID: {data.get("service", {}).get("id", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")})
- –°—É–º–º–∞: {data.get("amount", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")} USD
- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_timestamp(data.get("processedAt"))}

üì± **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ**
- IMEI: {properties.get("imei", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {properties.get("deviceName", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {properties.get("image", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {format_timestamp(properties.get("estPurchaseDate"))}
- SIM Lock: {"–î–∞" if properties.get("simLock") else "–ù–µ—Ç"}
- –ì–∞—Ä–∞–Ω—Ç–∏—è: {properties.get("warrantyStatus", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–µ–º–æ–Ω—Ç–∞: {properties.get("repairCoverage", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {properties.get("technicalSupport", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {properties.get("modelDesc", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –°—Ç—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {properties.get("purchaseCountry", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –†–µ–≥–∏–æ–Ω: {properties.get("apple/region", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- FMI –≤–∫–ª—é—á—ë–Ω: {"–î–∞" if properties.get("fmiOn") else "–ù–µ—Ç"}
- –†–µ–∂–∏–º —É—Ç–µ—Ä–∏: {properties.get("lostMode", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –°–®–ê: {properties.get("usaBlockStatus", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –°–µ—Ç—å: {properties.get("network", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {"–î–∞" if properties.get("demoUnit") else "–ù–µ—Ç"}
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π: {"–î–∞" if properties.get("refurbished") else "–ù–µ—Ç"}
        """

        await query.message.answer(formatted_output)
        await query.message.answer('–í–≤–µ–¥–∏—Ç–µ IMEI –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞')
        await query.message.delete()
    except Exception as e:
        print(e)
        await query.message.answer(str(e))
        await query.message.edit_reply_markup(reply_markup=mrkp)


